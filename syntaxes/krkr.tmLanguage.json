{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Krkr",
	"patterns": [
		{
			"include": "#statement"
		}
	],
	"repository": {

		"declaration": {
			"patterns": [
				{
					"include": "#class-declaration"
				},
				{
					"include": "#method-declaration"
				},
				{
					"include": "#property-declaration"
				},
				{
					"include": "#variable-declaration"
				},
				{
					"include": "#punctuation-semicolon"
				}
			]
		},
		"class-declaration": {
			"begin": "(?<!\\.)\\b(class)\\b\\s+((?:[_[:alpha:]]|[^\\x00-\\xff])(?:[_[:alnum:]]|[^\\x00-\\xff])*)",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.class.tjs.krkr"
				},
				"2": {
					"name": "entity.name.class.tjs.krkr"
				}
			},
			"end": "(?<=\\})",
			"patterns": [
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.curlybrace.begin.tjs.krkr"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.curlybrace.end.tjs.krkr"
						}
					},
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"include": "#preprocessor"
						},
						{
							"include": "#method-declaration"
						},
						{
							"include": "#variable-declaration"
						},
						{
							"include": "#property-declaration"
						}
		
					]
				}
			]
		},
		"expression": {
			"patterns": [
				{
					"include": "#preprocessor"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#function-special-parameter"
				},
				{
					"include": "#literal"
				},
				{
					"include": "#interpolated-string"
				},
				{
					"include": "#expression-operators"
				},
				{
					"include": "#array-creation-expression"
				},
				{
					"include": "#dictionary-creation-expression"
				},
				{
					"include": "#identifier"
				}

			]
		},
		"preprocessor": {
			"begin": "(@)((?:[_[:alpha:]]|[^\\x00-\\xff])(?:[_[:alnum:]]|[^\\x00-\\xff])*)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.separator.at.tjs.krkr"
				},
				"2": {
					"name": "keyword.other.preprocessor.tjs.krkr"
				}
			},
			"end": "(?<=$)",
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.parenthesis.begin.tjs.krkr"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.parenthesis.end.tjs.krkr"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			]
		},
		"statement": {
			"patterns": [

				{
					"include": "#comment"
				},
				{
					"include": "#block"
				},
				{
					"include": "#declaration"
				},
				{
					"include": "#break-or-continue-statement"
				},
				{
					"include": "#return-statement"
				},
				{
					"include": "#throw-statement"
				},
				{
					"include": "#if-statement"
				},
				{
					"include": "#else-statement"
				},
				{
					"include": "#while-statement"
				},
				{
					"include": "#do-statement"
				},
				{
					"include": "#for-statement"
				},
				{
					"include": "#switch-statement"
				},
				{
					"include": "#try-statement"
				},
				{
					"include": "#with-statement"
				},
				{
					"include": "#expression"
				},
				{
					"include": "#punctuation-semicolon"
				}
			]
		},
		"property-declaration": {
			"begin": "(?<!\\.)\\b(property)\\b\\s+((?:[_[:alpha:]]|[^\\x00-\\xff])(?:[_[:alnum:]]|[^\\x00-\\xff])*)",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.property.tjs.krkr"
				},
				"2": {
					"name": "entity.name.variable.property.tjs.krkr"
				}
			},
			"end": "(?<=\\})",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.curlybrace.begin.tjs.krkr"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.curlybrace.end.tjs.krkr"
						}
					},
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"begin": "(?<!\\.)\\b(getter)\\b",
							"beginCaptures": {
								"0": {
									"name": "keyword.other.getter"
								}
							},
							"end": "(?<=\\})",
							"patterns": [
								{
									"include": "#comment"
								},
								{
									"begin": "\\(",
									"beginCaptures": {
										"0": {
											"name": "punctuation.parenthesis.begin.tjs.krkr"
										}
									},
									"end": "\\)",
									"endCaptures": {
										"0": {
											"name": "punctuation.parenthesis.end.tjs.krkr"
										}
									}
								},
								{
									"include": "#block"
								}
							]
						},
						{
							"begin": "(?<!\\.)\\b(setter)\\b",
							"beginCaptures": {
								"0": {
									"name": "keyword.other.setter"
								}
							},
							"end": "(?<=\\})",
							"patterns": [
								{
									"include": "#comment"
								},
								{
									"begin": "\\(",
									"beginCaptures": {
										"0": {
											"name": "punctuation.parenthesis.begin.tjs.krkr"
										}
									},
									"end": "\\)",
									"endCaptures": {
										"0": {
											"name": "punctuation.parenthesis.end.tjs.krkr"
										}
									},
									"patterns": [
										{
											"include": "#comment"
										},
										{
											"include": "#parameter-list"
										}
									]
								},
								{
									"include": "#block"
								}
							]
						}
					]
				}
			]
		},
		"function-special-parameter": {
			"patterns": [
				{
					"match": "(?<=\\()\\*(?=\\))",
					"name": "keyword.other.copyparamlist"
				},
				{
					"match": "(?<=\\()\\.\\.\\.(?=\\))",
					"name": "keyword.other.copyallparam"
				}
			]
		},
		"interpolated-string": {
			"patterns": [
				{
					"name": "string.quoted.single.tjs.krkr",
					"begin": "\\@'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.tjs.krkr"
						}
					},
					"end": "(')|((?:[^\\\\\\n])$)",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.tjs.krkr"
						},
						"2": {
							"name": "invalid.illegal.newline.tjs.krkr"
						}
					},
					"patterns": [
						{
							"include": "#string-character-escape"
						},
						{
							"include": "#interpolation"
						}
					]
				},
				{
					"name": "string.quoted.double.tjs.krkr",
					"begin": "\\@\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.tjs.krkr"
						}
					},
					"end": "(\")|((?:[^\\\\\\n])$)",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.tjs.krkr"
						},
						"2": {
							"name": "invalid.illegal.newline.tjs.krkr"
						}
					},
					"patterns": [
						{
							"include": "#string-character-escape"
						},
						{
							"include": "#interpolation"
						}
					]
				}
			]
		},
		"interpolation": {
			"patterns": [
				{
					"name": "meta.interpolation.tjs.krkr",
					"begin": "(?<!\\\\)(\\$\\{)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.interpolation.begin.tjs.krkr"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.interpolation.end.tjs.krkr"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"name": "meta.interpolation.tjs.krkr",
					"begin": "(?<!\\\\)(&)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.interpolation.begin.tjs.krkr"
						}
					},
					"end": "\\;",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.interpolation.end.tjs.krkr"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			]
		},
		"return-statement": {
			"begin": "(?<!\\.)\\b(return)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.flow.return.tjs.krkr"
				}
			},
			"end": "(?=;)",
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"throw-statement": {
			"begin": "(?<!\\.)\\b(throw)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.flow.throw.tjs.krkr"
				}
			},
			"end": "(?=;)",
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"method-declaration": {
			"begin": "(?<!\\.)\\b(function)\\b",
			"beginCaptures": {
				"0": {
					"name": "keyword.other.function"
				}
			},
			"end": "(?<=\\})",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"name": "entity.name.function.tjs.krkr",
					"match": "(?<=function\\s+)(?:[_[:alpha:]]|[^\\x00-\\xff])(?:[_[:alnum:]]|[^\\x00-\\xff])*"
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.parenthesis.begin.tjs.krkr"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.parenthesis.end.tjs.krkr"
						}
					},
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"include": "#parameter-list"
						}
					]
				},
				{
					"include": "#block"
				}
			]
		},
		"parameter-list": {
			"patterns": [
				{
					"include": "#parameter"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"parameter": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"begin": "((?:[_[:alpha:]]|[^\\x00-\\xff])(?:[_[:alnum:]]|[^\\x00-\\xff])*)\\s*(?==)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.variable.parameter.tjs.krkr"
						}
					},
					"end": "(?=\\)|,)",
					"patterns": [
						{
							"include": "#variable-initializer"
						}
					]
				},
				{
					"match": "((?:[_[:alpha:]]|[^\\x00-\\xff])(?:[_[:alnum:]]|[^\\x00-\\xff])*)\\*",
					"name": "entity.name.variable.parameter.paramlist.tjs.krkr"
				},
				{
					"begin": "((?:[_[:alpha:]]|[^\\x00-\\xff])(?:[_[:alnum:]]|[^\\x00-\\xff])*)\\s*",
					"beginCaptures": {
						"1": {
							"name": "entity.name.variable.parameter.tjs.krkr"
						}
					},
					"end": "(?=\\)|,)"
				},
				{
					"match": "\\*",
					"name": "entity.name.variable.parameter.paramlist.tjs.krkr"
				}
			]
		},
		"try-statement": {
			"patterns": [
				{
					"include": "#try-block"
				},
				{
					"include": "#catch-clause"
				}
			]
		},
		"try-block": {
			"begin": "(?<!\\.)\\b(try)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.try.tjs.krkr"
				}
			},
			"end": "(?<=\\})",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#block"
				}
			]
		},
		"catch-clause": {
			"begin": "(?<!\\.)\\b(catch)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.try.catch.tjs.krkr"
				}
			},
			"end": "(?<=\\})",
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.parenthesis.begin.tjs.krkr"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.parenthesis.end.tjs.krkr"
						}
					},
					"patterns": [
						{
							"include": "#identifier"
						}
					]
				},
				{
					"include": "#comment"
				},
				{
					"include": "#block"
				}
			]
		},
		"break-or-continue-statement": {
			"match": "(?<!\\.)\\b(?:(break)|(continue))\\b",
			"captures": {
				"1": {
					"name": "keyword.control.flow.break.tjs.krkr"
				},
				"2": {
					"name": "keyword.control.flow.continue.tjs.krkr"
				}
			}
		},
		"block": {
			"name": "meta.block",
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.curlybrace.begin.tjs.krkr"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.curlybrace.end.tjs.krkr"
				}
			},
			"patterns": [
				{
					"include": "#statement"
				}
			]
		},
		"if-statement": {
			"begin": "(?<!\\.)\\b(if)\\b\\s*(?=\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.conditional.if.tjs.krkr"
				}
			},
			"end": "(?<=\\})|(?=;)",
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.parenthesis.begin.tjs.krkr"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.parenthesis.end.tjs.krkr"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"include": "#statement"
				}
			]
		},
		"else-statement": {
			"begin": "(?<!\\.)\\b(else)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.conditional.else.tjs.krkr"
				}
			},
			"end": "(?=;|\\})",
			"patterns": [
				{
					"include": "#statement"
				}
			]
		},
		"with-statement": {
			"begin": "(?<!\\.)\\b(with)\\b\\s*(?=\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.with"
				}
			},
			"end": "(?<=\\})|(?=;)",
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.parenthesis.begin.tjs.krkr"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.parenthesis.end.tjs.krkr"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"include": "#statement"
				}
			]
		},
		"while-statement": {
			"begin": "(?<!\\.)\\b(while)\\b\\s*(?=\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.loop.while.tjs.krkr"
				}
			},
			"end": "(?<=\\})|(?=;)",
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.parenthesis.begin.tjs.krkr"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.parenthesis.end.tjs.krkr"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"include": "#statement"
				}
			]
		},
		"do-statement": {
			"begin": "(?<!\\.)\\b(do)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.loop.do.tjs.krkr"
				}
			},
			"end": "(?=;|\\})",
			"patterns": [
				{
					"include": "#statement"
				}
			]
		},
		"for-statement": {
			"begin": "(?<!\\.)\\b(for)\\b\\s*(?=\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.loop.for.tjs.krkr"
				}
			},
			"end": "(?<=\\})|(?=;)",
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.parenthesis.begin.tjs.krkr"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.parenthesis.end.tjs.krkr"
						}
					},
					"patterns": [
						{
							"include": "#variable-declaration"
						},
						{
							"include": "#expression"
						},
						{
							"include": "#punctuation-comma"
						},
						{
							"include": "#punctuation-semicolon"
						}
					]
				},
				{
					"include": "#statement"
				}
			]
		},
		"switch-statement": {
			"begin": "(?<!\\.)\\b(switch)\\b\\s*(?=\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.switch.tjs.krkr"
				}
			},
			"end": "(?<=\\})",
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.parenthesis.begin.tjs.krkr"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.parenthesis.end.tjs.krkr"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.curlybrace.begin.tjs.krkr"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.curlybrace.end.tjs.krkr"
						}
					},
					"patterns": [
						{
							"include": "#switch-label"
						},
						{
							"include": "#statement"
						}
					]
				}
			]
		},
		"switch-label": {
			"patterns": [
				{
					"begin": "(?<!\\.)\\b(case)\\b\\s+",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.case.tjs.krkr"
						}
					},
					"end": ":",
					"endCaptures": {
						"0": {
							"name": "punctuation.separator.colon.tjs.krkr"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"match": "(?<!\\.)\\b(default)\\b\\s*(:)",
					"captures": {
						"1": {
							"name": "keyword.control.default.tjs.krkr"
						},
						"2": {
							"name": "punctuation.separator.colon.tjs.krkr"
						}
					}
				}
			]
		},
		"array-creation-expression": {
			"begin": "(?<!%)\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.squarebracket.begin.tjs.krkr"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.squarebracket.end.tjs.krkr"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"dictionary-creation-expression": {
			"begin": "%\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.percent-squarebracket.begin.tjs.krkr"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.percent.squarebracket.end.tjs.krkr"
				}
			},
			"patterns": [
				{
					"begin": "(?=\")",
					"end": "(?=[,\\]])",
					"patterns": [
						{
							"include": "#string-literal"
						},
						{
							"match": "=>|,",
							"name": "keyword.operator.dictionary-split.tjs.krkr"
						},
						{
							"include": "#expression"
						}
					]
				}
			]
		},
		"expression-operators": {
			"patterns": [
				{
					"name": "keyword.operator.assignment.compound.tjs.krkr",
					"match": "\\*=|/=|\\\\=|%=|\\+=|\\-=|<\\->"
				},
				{
					"name": "keyword.operator.assignment.compound.bitwise.tjs.krkr",
					"match": "\\&=|\\^=|<<=|>>=|>>>=|\\|="
				},
				{
					"name": "keyword.operator.bitwise.shift.tjs.krkr",
					"match": "<<|>>>|>>"
				},
				{
					"name": "keyword.operator.comparison.tjs.krkr",
					"match": "===|\\!==|==|\\!="
				},
				{
					"name": "keyword.operator.relational.tjs.krkr",
					"match": "<=|>=|<|>"
				},
				{
					"name": "keyword.operator.logical.tjs.krkr",
					"match": "\\!|&&|\\|\\|"
				},
				{
					"name": "keyword.operator.bitwise.tjs.krkr",
					"match": "\\&|~|\\^|\\|"
				},
				{
					"name": "keyword.operator.assignment.tjs.krkr",
					"match": "\\="
				},
				{
					"name": "keyword.operator.decrement.tjs.krkr",
					"match": "\\-\\-"
				},
				{
					"name": "keyword.operator.increment.tjs.krkr",
					"match": "\\+\\+"
				},
				{
					"name": "keyword.operator.arithmetic.tjs.krkr",
					"match": "%|\\*|/|\\-|\\+|\\\\"
				},
				{
					"name": "keyword.operator.new.tjs.krkr",
					"match": "(?<!\\.)\\bnew\\b"
				},
				{
					"name": "keyword.operator.invalidate.tjs.krkr",
					"match": "(?<!\\.)\\binvalidate\\b"
				},
				{
					"name": "keyword.operator.isvalid.tjs.krkr",
					"match": "(?<!\\.)\\bisvalid\\b"
				},
				{
					"name": "keyword.operator.delete.tjs.krkr",
					"match": "(?<!\\.)\\bdelete\\b"
				},
				{
					"name": "keyword.operator.typeof.tjs.krkr",
					"match": "(?<!\\.)\\btypeof\\b"
				},
				{
					"name": "keyword.operator.sharp.tjs.krkr",
					"match": "#"
				},
				{
					"name": "keyword.operator.dolar.tjs.krkr",
					"match": "\\$"
				},
				{
					"name": "keyword.operator.instanceof.tjs.krkr",
					"match": "(?<!\\.)\\binstanceof\\b"
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "keyword.operator.call.begin.tjs.krkr"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "keyword.operator.call.end.tjs.krkr"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"begin": "(?<=[\\}\\)\\]\\w]|[^\\x00\\xff])\\s*(\\[)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.access.begin.tjs.krkr"
						}
					},
					"end": "\\]",
					"endCaptures": {
						"0": {
							"name": "keyword.operator.access.end.tjs.krkr"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"begin": "\\.",
					"beginCaptures": {
						"0": {
							"name": "keyword.operator.member-access.tjs.krkr"
						}
					},
					"end": "(?=[,\\)\\];\\}])",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"name": "keyword.operator.incontextof",
					"match": "(?<!\\.)\\bincontextof\\b"
				},
				{
					"name": "keyword.operator.cast",
					"match": "(?<!\\.)\\b(?:int|real|string)\\b"
				}

			]
		},
		"literal": {
			"patterns": [
				{
					"include": "#boolean-literal"
				},
				{
					"include": "#null-literal"
				},
				{
					"include": "#void-literal"
				},
				{
					"include": "#numeric-literal"
				},
				{
					"include": "#string-literal"
				},
				{
					"include": "#octal-string-literal"
				},
				{
					"include": "#regular-expression-literal"
				}
			]
		},
		"regular-expression-literal": {
			"patterns": [
				{
					"name": "string.regexp.tjs.krkr",
					"begin": "(?<!\\+\\+|--|})(?<=[=(:,\\[?+!]|^return|[^\\._$[:alnum:]]return|^case|[^\\._$[:alnum:]]case|=>|&&|\\|\\||\\*\\/)\\s*(\\/)(?![\\/*])(?=(?:[^\\/\\\\\\[\\()]|\\\\.|\\[([^\\]\\\\]|\\\\.)+\\]|\\(([^\\)\\\\]|\\\\.)+\\))+\\/([dgimsuy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.string.begin.slash.tjs.krkr"
						}
					},
					"end": "(/)([dgimsuy]*)",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.slash.tjs.krkr"
						},
						"2": {
							"name": "keyword.other.tjs.krkr"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				},
				{
					"name": "string.regexp.tjs.krkr",
					"begin": "((?<![_$[:alnum:])\\]]|\\+\\+|--|}|\\*\\/)|((?<=^return|[^\\._$[:alnum:]]return|^case|[^\\._$[:alnum:]]case))\\s*)\\/(?![\\/*])(?=(?:[^\\/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)*\\])+\\/([dgimsuy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.slash.tjs.krkr"
						}
					},
					"end": "(/)([dgimsuy]*)",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.slash.tjs.krkr"
						},
						"2": {
							"name": "keyword.other.tjs.krkr"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				}
			]
		},
		"regexp": {
			"patterns": [
				{
					"name": "keyword.control.anchor.regexp.tjs.krkr",
					"match": "\\\\[bB]|\\^|\\$"
				},
				{
					"match": "\\\\[1-9]\\d*|\\\\k<([a-zA-Z_$][\\w$]*)>",
					"captures": {
						"0": {
							"name": "keyword.other.back-reference.regexp.tjs.krkr"
						},
						"1": {
							"name": "variable.other.regexp.tjs.krkr"
						}
					}
				},
				{
					"name": "keyword.operator.quantifier.regexp.tjs.krkr",
					"match": "[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??"
				},
				{
					"name": "keyword.operator.or.regexp.tjs.krkr",
					"match": "\\|"
				},
				{
					"name": "meta.group.assertion.regexp.tjs.krkr",
					"begin": "(\\()((\\?=)|(\\?!)|(\\?<=)|(\\?<!))",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.group.regexp.tjs.krkr"
						},
						"2": {
							"name": "punctuation.definition.group.assertion.regexp.tjs.krkr"
						},
						"3": {
							"name": "meta.assertion.look-ahead.regexp.tjs.krkr"
						},
						"4": {
							"name": "meta.assertion.negative-look-ahead.regexp.tjs.krkr"
						},
						"5": {
							"name": "meta.assertion.look-behind.regexp.tjs.krkr"
						},
						"6": {
							"name": "meta.assertion.negative-look-behind.regexp.tjs.krkr"
						}
					},
					"end": "(\\))",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.group.regexp.tjs.krkr"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				},
				{
					"name": "meta.group.regexp.tjs.krkr",
					"begin": "\\((?:(\\?:)|(?:\\?<([a-zA-Z_$][\\w$]*)>))?",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.group.regexp.tjs.krkr"
						},
						"1": {
							"name": "punctuation.definition.group.no-capture.regexp.tjs.krkr"
						},
						"2": {
							"name": "variable.other.regexp.tjs.krkr"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.group.regexp.tjs.krkr"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				},
				{
					"name": "constant.other.character-class.set.regexp.tjs.krkr",
					"begin": "(\\[)(\\^)?",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.character-class.regexp.tjs.krkr"
						},
						"2": {
							"name": "keyword.operator.negation.regexp.tjs.krkr"
						}
					},
					"end": "(\\])",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.character-class.regexp.tjs.krkr"
						}
					},
					"patterns": [
						{
							"name": "constant.other.character-class.range.regexp.tjs.krkr",
							"match": "(?:.|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))",
							"captures": {
								"1": {
									"name": "constant.character.numeric.regexp.tjs.krkr"
								},
								"2": {
									"name": "constant.character.control.regexp.tjs.krkr"
								},
								"3": {
									"name": "constant.character.escape.backslash.regexp.tjs.krkr"
								},
								"4": {
									"name": "constant.character.numeric.regexp.tjs.krkr"
								},
								"5": {
									"name": "constant.character.control.regexp.tjs.krkr"
								},
								"6": {
									"name": "constant.character.escape.backslash.regexp.tjs.krkr"
								}
							}
						},
						{
							"include": "#regex-character-class"
						}
					]
				},
				{
					"include": "#regex-character-class"
				}
			]
		},
		"regex-character-class": {
			"patterns": [
				{
					"name": "constant.other.character-class.regexp.tjs.krkr",
					"match": "\\\\[wWsSdDtrnvf]|\\."
				},
				{
					"name": "constant.character.numeric.regexp.tjs.krkr",
					"match": "\\\\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})"
				},
				{
					"name": "constant.character.control.regexp.tjs.krkr",
					"match": "\\\\c[A-Z]"
				},
				{
					"name": "constant.character.escape.backslash.regexp.tjs.krkr",
					"match": "\\\\."
				}
			]
		},
		"octal-string-literal": {
			"name": "string.quoted.other.octal.tjs.krkr",
			"begin": "<%",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.octal-string.begin.tjs.krkr"
				}
			},
			"end": "%>",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.octal-string.end.tjs.krkr"
				}
			},
			"patterns": [
				{
					"match": "(?<=^|<%|\\s)([0-9a-zA-Z_\\.]+)(?=$|%>|\\s)",
					"captures": {
						"1": {
							"patterns": [
								{
									"name": "constant.numeric.octal-string-element.tjs.krkr",
									"match": "(?<![0-9a-fA-F])[0-9a-fA-F]{2}(?![0-9a-fA-F])"
								},
								{
									"name": "invalid.illegal.constant.numeric.tjs.krkr",
									"match": "[0-9a-zA-Z_\\.]+"
								}
							]
						}
					}
				}
			]
		},
		"string-literal": {
			"patterns": [
				{
					"name": "string.quoted.double.tjs.krkr",
					"begin": "(?<!@)\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.double.tjs.krkr"
						}
					},
					"end": "(\")|((?:[^\\\\\\n])$)",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.double.tjs.krkr"
						},
						"2": {
							"name": "invalid.illegal.newline.tjs.krkr"
						}
					},
					"patterns": [
						{
							"include": "#string-character-escape"
						}
					]
				},
				{
					"name": "string.quoted.single.tjs.krkr",
					"begin": "(?<!@)'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.single.tjs.krkr"
						}
					},
					"end": "(')|((?:[^\\\\\\n])$)",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.single.tjs.krkr"
						},
						"2": {
							"name": "invalid.illegal.newline.tjs.krkr"
						}
					},
					"patterns": [
						{
							"include": "#string-character-escape"
						}
					]
				}			
			]
		},
		"string-character-escape": {
			"name": "constant.character.escape.tjs.krkr",
			"match": "\\\\(['\"\\\\0abfnrtv\\&\\$]|x[0-9a-fA-F]{1,4})"
		},
		"boolean-literal": {
			"patterns": [
				{
					"name": "constant.language.boolean.true.tjs.krkr",
					"match": "(?<!\\.)\\btrue\\b"		
				},
				{
					"name": "constant.language.boolean.false.tjs.krkr",
					"match": "(?<!\\.)\\bfalse\\b"
				}
			]
		},
		"null-literal": {
			"name": "constant.language.null.tjs.krkr",
			"match": "(?<!\\.)\\bnull\\b"
		},
		"void-literal": {
			"name": "constant.language.void.tjs.krkr",
			"match": "(?<!\\.)\\bvoid\\bv"
		},
		"numeric-literal": {
			"match": "(?<!\\w)\\.?\\d(?:(?:[0-9a-zA-Z\\._])|(?<=[eEpP])[+-])*",
			"captures": {
				"0": {
					"patterns": [
						{
							"begin": "(?=.)",
							"end": "$",
							"patterns": [
								{
									"match": "(\\G(?=[0-9\\.])(?!0[xXbB\\d]))([0-9]*)((?:(?<=[0-9])|\\.(?=[0-9])))([0-9]*)([eE](\\+?)(\\-?)([0-9]*))?$",
									"captures": {
										"2": {
											"name": "constant.numeric.decimal.tjs.krkr"
										},
										"3": {
											"name": "constant.numeric.other.separator.tjs.krkr"
										},
										"4": {
											"name": "constant.numeric.decimal.tjs.krkr"
										},
										"5": {
											"name": "constant.numeric.other.exponent.decimal.tjs.krkr"
										},
										"6": {
											"name": "keyword.operator.arithmetic.tjs.krkr"
										},
										"7": {
											"name": "keyword.operator.arithmetic.tjs.krkr"
										},
										"8": {
											"name": "constant.numeric.decimal.tjs.krkr"
										}
									}
								},
								{
									"match": "(\\G0[bB])([01]*)((?:(?<=[01])|\\.(?=[01])))([01]*)([pP](\\+?)(\\-?)([01]*))?$",
									"captures": {
										"1": {
											"name": "constant.numeric.other.preffix.binary.tjs.krkr"
										},
										"2": {
											"name": "constant.numeric.binary.tjs.krkr"
										},
										"3": {
											"name": "constant.numeric.other.separator.tjs.krkr"
										},
										"4": {
											"name": "constant.numeric.binary.tjs.krkr"
										},
										"5": {
											"name": "constant.numeric.other.exponent.nondecimal.tjs.krkr"
										},
										"6": {
											"name": "keyword.operator.arithmetic.tjs.krkr"
										},
										"7": {
											"name": "keyword.operator.arithmetic.tjs.krkr"
										},
										"8": {
											"name": "constant.numeric.binary.tjs.krkr"
										}
									}
								},
								{
									"match": "(\\G0(?=[0-7]))([0-7]*)((?:(?<=[0-7])|\\.(?=[0-7])))([0-7]*)([pP](\\+?)(\\-?)([0-7]*))?$",
									"captures": {
										"1": {
											"name": "constant.numeric.other.preffix.octal.tjs.krkr"
										},
										"2": {
											"name": "constant.numeric.octal.tjs.krkr"
										},
										"3": {
											"name": "constant.numeric.other.separator.tjs.krkr"
										},
										"4": {
											"name": "constant.numeric.octal.tjs.krkr"
										},
										"5": {
											"name": "constant.numeric.other.exponent.nondecimal.tjs.krkr"
										},
										"6": {
											"name": "keyword.operator.arithmetic.tjs.krkr"
										},
										"7": {
											"name": "keyword.operator.arithmetic.tjs.krkr"
										},
										"8": {
											"name": "constant.numeric.octal.tjs.krkr"
										}
									}
								},
								{
									"match": "(\\G0[xX])([0-9a-fA-F]*)((?:(?<=[0-9a-fA-F])|\\.(?=[0-9a-fA-F])))([0-9a-fA-F]*)([pP](\\+?)(\\-?)([0-9a-fA-F]*))?$",
									"captures": {
										"1": {
											"name": "constant.numeric.other.preffix.heximal.tjs.krkr"
										},
										"2": {
											"name": "constant.numeric.heximal.tjs.krkr"
										},
										"3": {
											"name": "constant.numeric.other.separator.tjs.krkr"
										},
										"4": {
											"name": "constant.numeric.heximal.tjs.krkr"
										},
										"5": {
											"name": "constant.numeric.other.exponent.nondecimal.tjs.krkr"
										},
										"6": {
											"name": "keyword.operator.arithmetic.tjs.krkr"
										},
										"7": {
											"name": "keyword.operator.arithmetic.tjs.krkr"
										},
										"8": {
											"name": "constant.numeric.heximal.tjs.krkr"
										}
									}
								},
								{
									"match": "(?:(?:[0-9a-zA-Z_\\.]|_)|(?<=[eE])[+-])+",
									"name": "invalid.illegal.constant.numeric.tjs.krkr"
								}
							]
		
						}
					]
				}
			}
		},
		"identifier": {
			"patterns": [
				{
					"name": "variable.language.this.tjs.krkr",
					"match": "(?<!\\.)\\b(this)\\b"
				},
				{
					"name": "variable.language.super.tjs.krkr",
					"match": "(?<!\\.)\\b(super)\\b"
				},
				{
					"name": "variable.other.readwrite.tjs.krkr",
					"match": "\\b(?:[_[:alpha:]]|[^\\x00-\\xff])(?:[_[:alnum:]]|[^\\x00-\\xff])*\\b"		
				}
			]
		},
		"variable-declaration": {
			"begin": "(\\bvar\\b)\\s+((?:[_[:alpha:]]|[^\\x00-\\xff])(?:[_[:alnum:]]|[^\\x00-\\xff])*)\\s*(?=,|;|=|\\))",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.var.tjs.krkr"
				},
				"2": {
					"name": "entity.name.variable.tjs.krkr"
				}
			},
			"end": "(?=;|\\))",
			"patterns": [
				{
					"name": "entity.name.variable.tjs.krkr",
					"match": "(?:[_[:alpha:]]|[^\\x00-\\xff])(?:[_[:alnum:]]|[^\\x00-\\xff])*"
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#variable-initializer"
				}
			]
		},
		"variable-initializer": {
			"begin": "(?<!=|\\!)(=)(?!=|>)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.assignment.tjs.krkr"
				}
			},
			"end": "(?=[,\\)\\];\\}])",
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"name": "comment.block.tjs.krkr",
					"begin": "/\\*",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.tjs.krkr"
						}
					},
					"end": "\\*/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.tjs.krkr"
						}
					}
				},
				{
					"begin": "(^\\s+)?(?=//)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.tjs.krkr"
						}
					},
					"end": "(?=$)",
					"patterns": [
						{
							"name": "comment.block.documentation.tjs.krkr",
							"begin": "(?<!/)///(?!/)",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.tjs.krkr"
								}
							},
							"end": "(?=$)",
							"patterns": [
								{
									"include": "#xml-doc-comment"
								}
							]
						},
						{
							"name": "comment.line.double-slash.tjs.krkr",
							"begin": "(?<!/)//(?:(?!/)|(?=//))",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.tjs.krkr"
								}
							},
							"end": "(?=$)"
						}
					]
				}
			]
		},
		"punctuation-semicolon": {
			"name": "punctuation.terminator.statement.tjs.krkr",
			"match": ";"
		},
		"punctuation-accessor": {
			"name": "punctuation.accessor.tjs.krkr",
			"match": "\\."
		},
		"punctuation-comma": {
			"name": "punctuation.separator.comma.tjs.krkr",
			"match": ","
		},
		"kag-tag": {
			"name": "meta.tag.kag.krkr",
			"begin": "(@)((?:[_[:alpha:]]|[^\\x00-\\xff])(?:[_[:alnum:]]|[^\\x00-\\xff])*)\\s+",
			"beginCaptures": {
				"1": {
					"name": "punctuation.separator.at.kag.krkr"
				},
				"2": {
					"name": "entity.name.tag.kag.krkr"
				}
			},
			"end": "(?=$)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#kag-attribute"
				}
			]
		},
		"kag-attribute": {
			"begin": "((?:[_[:alpha:]]|[^\\x00-\\xff])(?:[_[:alnum:]]|[^\\x00-\\xff])*)\\s*",
			"beginCaptures": {
				"1": {
					"name": "entity.other.attribute-name.kag.krkr"
				}
			},
			"end": "(?=\\s+|$)",
			"patterns": [
				{
					"begin": "(=)\\s*(?=\"|')",
					"beginCaptures": {
						"1": {
							"name": "punctuation.separator.colon.kag.krkr"
						}
					},
					"end": "(?=\\s+|$)",
					"patterns": [
						{
							"include": "#string-literal"
						}
					]
				}
			]
		},
		"xml-doc-comment": {
			"patterns": [
				{
					"include": "#xml-comment"
				},
				{
					"include": "#xml-character-entity"
				},
				{
					"include": "#xml-cdata"
				},
				{
					"include": "#xml-tag"
				}
			]
		},
		"xml-tag": {
			"name": "meta.tag.tjs.krkr",
			"begin": "(</?)((?:([-_[:alnum:]]+))(:))?([-_[:alnum:]]+)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.tag.tjs.krkr"
				},
				"2": {
					"name": "entity.name.tag.tjs.krkr"
				},
				"3": {
					"name": "entity.name.tag.namespace.tjs.krkr"
				},
				"4": {
					"name": "punctuation.separator.colon.tjs.krkr"
				},
				"5": {
					"name": "entity.name.tag.localname.tjs.krkr"
				}
			},
			"end": "(/?>)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.tag.tjs.krkr"
				}
			},
			"patterns": [
				{
					"include": "#xml-attribute"
				}
			]
		},
		"xml-attribute": {
			"patterns": [
				{
					"match": "(?:^|\\s+)((?:([-_[:alnum:]]+)(:))?([-_[:alnum:]]+))(=)",
					"captures": {
						"1": {
							"name": "entity.other.attribute-name.tjs.krkr"
						},
						"2": {
							"name": "entity.other.attribute-name.namespace.tjs.krkr"
						},
						"3": {
							"name": "punctuation.separator.colon.tjs.krkr"
						},
						"4": {
							"name": "entity.other.attribute-name.localname.tjs.krkr"
						},
						"5": {
							"name": "punctuation.separator.equals.tjs.krkr"
						}
					}
				},
				{
					"include": "#xml-string"
				}
			]
		},
		"xml-cdata": {
			"name": "string.unquoted.cdata.tjs.krkr",
			"begin": "<!\\[CDATA\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.tjs.krkr"
				}
			},
			"end": "\\]\\]>",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.tjs.krkr"
				}
			}
		},
		"xml-string": {
			"patterns": [
				{
					"name": "string.quoted.single.tjs.krkr",
					"begin": "\\'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.tjs.krkr"
						}
					},
					"end": "\\'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.tjs.krkr"
						}
					},
					"patterns": [
						{
							"include": "#xml-character-entity"
						}
					]
				},
				{
					"name": "string.quoted.double.tjs.krkr",
					"begin": "\\\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.tjs.krkr"
						}
					},
					"end": "\\\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.tjs.krkr"
						}
					},
					"patterns": [
						{
							"include": "#xml-character-entity"
						}
					]
				}
			]
		},
		"xml-character-entity": {
			"patterns": [
				{
					"name": "constant.character.entity.tjs.krkr",
					"match": "(&)((?:[[:alpha:]:_][[:alnum:]:_.-]*)|(?:\\#[[:digit:]]+)|(?:\\#x[[:xdigit:]]+))(;)",
					"captures": {
						"1": {
							"name": "punctuation.definition.constant.tjs.krkr"
						},
						"3": {
							"name": "punctuation.definition.constant.tjs.krkr"
						}
					}
				},
				{
					"name": "invalid.illegal.bad-ampersand.tjs.krkr",
					"match": "&"
				}
			]
		},
		"xml-comment": {
			"name": "comment.block.tjs.krkr",
			"begin": "<!--",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.comment.tjs.krkr"
				}
			},
			"end": "-->",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.comment.tjs.krkr"
				}
			}
		}
	},
	"scopeName": "source.krkr"
}